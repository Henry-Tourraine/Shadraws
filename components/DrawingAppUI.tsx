import { DrawingAppLogic } from "../drawing/app";
import { useCallback, useEffect, useRef, useState } from "react";
import { LayerLogic } from "../drawing/LayerLogic";
import { LayerStack } from "./LayerStack";
import { Context, useGlobalContext } from "../context/GlobalContext";
import Head from 'next/head'
import { stringify } from "querystring";
import MainMenu from "./MainMenu";
import MainToolsMenu from "./MainToolsMenu";
import basicShape from "../shaders/brushes/brushesHead/basic.png";
import { LeftToolsMenu } from "./LeftMenuTools/LefToolsMenu";
import { Activity } from "../drawing/utils";
import { PromptAI } from "./AI/PromptAI";



export type mayDrawingAppLogic = DrawingAppLogic|null;
export type mayDrawingAppLogic_ = {app: DrawingAppLogic|null};


export function DrawingAppUI(){
  //let [test, setTest] = useState<number>();
  let canvas = useRef<HTMLCanvasElement>(null);
  let [p, setP] = useState("");
  let [gl, setGL] = useState(canvas.current?.getContext("webgl2"));
  let MAX_TEXTURES = 7 * 5 + 8;//+8 for extra uses
  
  let [appLogic, setAppLogic]=useState<mayDrawingAppLogic>(null);
  let [layers, setLayers] = useState<Array<LayerLogic>>([]);
  let { app, setApp, setTest, test} = useGlobalContext();

  let wrapper = useRef<HTMLDivElement>(null);
 
  useEffect(()=>{
    let temp =  ()=>{
     
      setTest(new Date().getTime())
    };
    window.addEventListener("rerender", temp);
    return ()=>{window.removeEventListener("rerender", temp);}
    }, [])
  
  
 
  useEffect(()=>{
    (async()=>{
     
    setGL(canvas.current!.getContext("webgl2") as WebGL2RenderingContext);
    //gl = gl as WebGL2RenderingContext;
    if(gl != undefined && gl != null){
     
      if(appLogic==null){
        
        let d = await DrawingAppLogic.getInstance(gl, MAX_TEXTURES, wrapper.current!);
       

        console.log("drawing app set")
       
       
        for(let i=0; i<2; i++){
          if(i==0){
            d!.createLayer(Activity.BASE, [255,255,255,1]);
            continue;
          }
          d!.createLayer(Activity.BASE);
        

        }
        
    
        //d!.checkLayer(0);
        
        await d!.initPrograms();

     
      
        setLayers(prev=>[...d!.layerStack])
        setAppLogic(prev=>d!);
       
        setApp(d!);

        
       
        
        d!.listenToActions();

        d!.renderLayerStack2();
        
      }

    }
    
    })()
   
    
  }, [gl, appLogic])

  
  function drawPen(){

  }

  
    return(
      
     
<div className='flex-column'>
  <Head>
  <title>Create Next App</title>
  <meta name="description" content="Generated by create next app" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="/favicon.ico" />
  </Head>
  <div>
   <PromptAI/>
    <MainMenu />
  </div>
  <div className="mainTools">
    <MainToolsMenu/>
  </div>
  <div className="mainWrapper flex flex-row flex-wrap">
    <div className="draw w-3/4 relative h-[calc(100vh-8em)]">
    <div className="absolute t-1/5 l-1/5 py-6 px-6">
      <LeftToolsMenu/>
    </div>
    <div ref={wrapper} className='absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 overflow-hidden' style={{width: "400px", height:"400px", background: "#333"}}>
      <canvas
              className='absolute'
              width={400}
              height={400}
              style={{height: 400, width: 400}}
              ref={canvas}>
            </canvas>
    </div>
          

      <p>{p}</p>

      <div className="bottomToolBox absolute bottom-3 w-3/4">BottomToolBox</div>
    </div>

    <div className="sideBarRight flex flex-col w-1/4">
      <div className="auxilium">
        Auxilium
      </div>
      <LayerStack layers={app?.layerStack!}/>
      <p>rest...</p>
    </div>
  </div>
</div>

    )
}
